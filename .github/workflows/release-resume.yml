name: Build and Publish CV PDF

permissions:
  contents: write

on:
  push:
    paths:
      - 'cv.typ'
  workflow_dispatch:

env:
  TAG: cv-latest

jobs:
  build-and-release:
    name: Build CV and publish single Release asset
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust (for typst)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install typst
        run: |
          cargo install --locked typst || true

      - name: Compile Typst to PDF
        run: |
          typst compile cv.typ -o cv.pdf
        shell: bash

      - name: Remove existing release & tag (if any)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ env.TAG }}
        run: |
          set -e
          echo "Checking for existing release with tag $TAG"
          resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/tags/$TAG")
          # If not found, API returns {"message":"Not Found",...}
          if [ "$(echo "$resp" | jq -r '.message' 2>/dev/null)" != "Not Found" ]; then
            release_id=$(echo "$resp" | jq -r '.id')
            if [ "$release_id" != "null" ]; then
              echo "Deleting existing release id: $release_id"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO/releases/$release_id"
            fi
          else
            echo "No existing release with tag $TAG"
          fi

          # Delete git tag ref if exists (ignore failure)
          echo "Deleting git tag ref refs/tags/$TAG (if exists)"
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/tags/$TAG" || true
        shell: bash

      - name: Create release (cv-latest)
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ env.TAG }}
        run: |
          payload=$(jq -n --arg tag "$TAG" --arg sha "$GITHUB_SHA" '{tag_name:$tag, name: "CV (latest)", body: ("Automated CV build from " + $sha), draft:false, prerelease:false}')
          create_resp=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "https://api.github.com/repos/$REPO/releases")
          upload_url=$(echo "$create_resp" | jq -r .upload_url)
          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
            echo "Failed to create release. Response: $create_resp"
            exit 1
          fi
          # Persist upload_url for next step (strip template part when using)
          echo "$upload_url" > $GITHUB_WORKSPACE/upload_url.txt
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload cv.pdf to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url=$(cat $GITHUB_WORKSPACE/upload_url.txt)
          upload_url="${upload_url%\{*}"
          echo "Uploading cv.pdf to $upload_url?name=cv.pdf"
          resp=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/pdf" \
            --data-binary @cv.pdf \
            "$upload_url?name=cv.pdf")
          echo "$resp" | jq -r '.browser_download_url'
        shell: bash

      - name: Print latest-download permalink
        run: |
          echo "Latest CV permalink: https://github.com/${{ github.repository }}/releases/latest/download/cv.pdf"
        shell: bash
